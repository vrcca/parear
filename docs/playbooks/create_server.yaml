- hosts: localhost
  tasks:
  - name: "Ensure an SSH key is present"
    delegate_to: localhost
    hcloud_ssh_key:
      name: "localhost-public-key"
      public_key: "{{ public_ssh_key }}"

  - name: "Creates {{ server_name }} server if not existing"
    delegate_to: localhost
    hcloud_server:
      name: "{{ server_name }}"
      server_type: "{{ instance_type }}"
      image: "{{ image }}"
      location: "{{ region }}"
      ssh_keys:
        - "localhost-public-key"
      state: present

  - name: "Ensure {{ server_name }} has started"
    local_action:
      module: hcloud_server
      name: "{{ server_name }}"
      state: started

  - name: "Create a Floating IP"
    hcloud_floating_ip:
      name: "{{ server_name }}_floating_ip"
      home_location: "{{ region }}"
      type: ipv4
      delete_protection: true
      state: present
    register: floating_ip_result

  - name: "Assign a Floating IP to {{ server_name }}"
    hcloud_floating_ip:
      name: "{{ server_name }}_floating_ip"
      server: "{{ server_name }}"
      state: present

  - name: Create a DNS 'A' record in Cloudflare
    community.general.cloudflare_dns:
      zone: "{{ dns_zone }}"
      record: "{{ dns_record }}"
      type: A
      value: "{{ floating_ip_result.hcloud_floating_ip.ip }}"
      api_token: "{{ dns_api_token }}"
      proxied: true

  - name: "Get public IP of ansible host"
    local_action:
      module: ipify_facts
    when: not(ansible_facts.ipify_public_ip is defined)

  - name: "Refresh inventory"
    delegate_to: localhost
    meta: refresh_inventory

- hosts: "{{ server_name }}"
  tasks:
    - name: "Sets Floating IP fact"
      set_fact:
        floating_ip: "{{ hostvars['localhost']['floating_ip_result'].hcloud_floating_ip.ip }}"
        netplan_config_file: "/etc/netplan/60-floating-ip.yaml"

    - name: "Checks netplan exists"
      stat:
        path: "{{ netplan_config_file }}"
      register: netplan_file

    - name: "Persists Floating IP in {{ server_name }} eth0"
      template:
        src: "templates/netplan_60-floating-ip.yaml.j2"
        dest: "{{ netplan_config_file }}"
      when: netplan_file.stat.exists == False

    - name: Apply netplan
      command: sudo netplan apply
      ignore_errors: true
      when: netplan_file.stat.exists == False

    - name: Ensure server is reachable
      shell: ping -c 1 -w 2 '{{ floating_ip }}'
      ignore_errors: true
      when: netplan_file.stat.exists == False
